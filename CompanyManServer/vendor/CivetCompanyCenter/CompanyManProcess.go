// Package CivetCompanyCenter comment
// This file was generated by tars2go 1.1.4
// Generated from CompanyManProcess.tars
package CivetCompanyCenter

import (
	"fmt"

	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8

// Company struct implement
type Company struct {
	Id      int32  `json:"id"`
	Name    string `json:"name"`
	Address string `json:"address"`
	Contact string `json:"contact"`
	Email   string `json:"email"`
	RoleID  int32  `json:"roleID"`
}

func (st *Company) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Company) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.Id, 0, true)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Name, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Address, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Contact, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Email, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.RoleID, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Company) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Company, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Company) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.Id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Name, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Address, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Contact, 3)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Email, 4)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.RoleID, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Company) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CompanyHasRole struct implement
type CompanyHasRole struct {
	Id          int32  `json:"id"`
	Company_id  int32  `json:"Company_id"`
	Role_id     int32  `json:"Role_id"`
	Create_time int32  `json:"create_time"`
	Update_time int32  `json:"update_time"`
	Uni_id      string `json:"uni_id"`
}

func (st *CompanyHasRole) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CompanyHasRole) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Company_id, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Role_id, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Create_time, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Update_time, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Uni_id, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CompanyHasRole) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CompanyHasRole, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CompanyHasRole) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.Id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Company_id, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Role_id, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Create_time, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Update_time, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Uni_id, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CompanyHasRole) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// Role struct implement
type Role struct {
	Id         int32  `json:"id"`
	RoleName   string `json:"roleName"`
	Summarize  string `json:"summarize"`
	CreateTime int32  `json:"createTime"`
	UpdateTime int32  `json:"updateTime"`
}

func (st *Role) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *Role) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.RoleName, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Summarize, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.CreateTime, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.UpdateTime, 4, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *Role) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require Role, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *Role) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.Id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.RoleName, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Summarize, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.CreateTime, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.UpdateTime, 4)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *Role) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// RoleHasPermission struct implement
type RoleHasPermission struct {
	Id            int32  `json:"id"`
	Role_id       int32  `json:"role_id"`
	Permission_id int32  `json:"Permission_id"`
	Create_time   int32  `json:"create_time"`
	Update_time   int32  `json:"update_time"`
	Uni_id        string `json:"uni_id"`
}

func (st *RoleHasPermission) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *RoleHasPermission) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Role_id, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Permission_id, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Create_time, 3, false)
	if err != nil {
		return err
	}

	err = _is.Read_int32(&st.Update_time, 4, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Uni_id, 5, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *RoleHasPermission) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require RoleHasPermission, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *RoleHasPermission) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.Id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Role_id, 1)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Permission_id, 2)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Create_time, 3)
	if err != nil {
		return err
	}

	err = _os.Write_int32(st.Update_time, 4)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Uni_id, 5)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *RoleHasPermission) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}

// CPermission struct implement
type CPermission struct {
	Id        int32  `json:"id"`
	Tag       string `json:"tag"`
	Name      string `json:"name"`
	Summarize string `json:"summarize"`
}

func (st *CPermission) ResetDefault() {
}

//ReadFrom reads  from _is and put into struct.
func (st *CPermission) ReadFrom(_is *codec.Reader) error {
	var err error
	var length int32
	var have bool
	var ty byte
	st.ResetDefault()

	err = _is.Read_int32(&st.Id, 0, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Tag, 1, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Name, 2, false)
	if err != nil {
		return err
	}

	err = _is.Read_string(&st.Summarize, 3, false)
	if err != nil {
		return err
	}

	_ = err
	_ = length
	_ = have
	_ = ty
	return nil
}

//ReadBlock reads struct from the given tag , require or optional.
func (st *CPermission) ReadBlock(_is *codec.Reader, tag byte, require bool) error {
	var err error
	var have bool
	st.ResetDefault()

	err, have = _is.SkipTo(codec.STRUCT_BEGIN, tag, require)
	if err != nil {
		return err
	}
	if !have {
		if require {
			return fmt.Errorf("require CPermission, but not exist. tag %d", tag)
		}
		return nil
	}

	err = st.ReadFrom(_is)
	if err != nil {
		return err
	}

	err = _is.SkipToStructEnd()
	if err != nil {
		return err
	}
	_ = have
	return nil
}

//WriteTo encode struct to buffer
func (st *CPermission) WriteTo(_os *codec.Buffer) error {
	var err error

	err = _os.Write_int32(st.Id, 0)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Tag, 1)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Name, 2)
	if err != nil {
		return err
	}

	err = _os.Write_string(st.Summarize, 3)
	if err != nil {
		return err
	}

	_ = err

	return nil
}

//WriteBlock encode struct
func (st *CPermission) WriteBlock(_os *codec.Buffer, tag byte) error {
	var err error
	err = _os.WriteHead(codec.STRUCT_BEGIN, tag)
	if err != nil {
		return err
	}

	err = st.WriteTo(_os)
	if err != nil {
		return err
	}

	err = _os.WriteHead(codec.STRUCT_END, 0)
	if err != nil {
		return err
	}
	return nil
}
