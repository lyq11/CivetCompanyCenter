// Package CivetCompanyCenter comment
// This file was generated by tars2go 1.1.4
// Generated from CompanyManProcess.tars
package CivetCompanyCenter

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/TarsCloud/TarsGo/tars"
	m "github.com/TarsCloud/TarsGo/tars/model"
	"github.com/TarsCloud/TarsGo/tars/protocol/codec"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/basef"
	"github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	"github.com/TarsCloud/TarsGo/tars/protocol/tup"
	"github.com/TarsCloud/TarsGo/tars/util/current"
	"github.com/TarsCloud/TarsGo/tars/util/tools"
	"unsafe"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = codec.FromInt8
var _ = unsafe.Pointer(nil)
var _ = bytes.ErrTooLarge

//CompanyManProcess struct
type CompanyManProcess struct {
	s m.Servant
}

//CreateCompany is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreateCompany(newCompany *Company, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCompany.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "createCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateCompanyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreateCompanyWithContext(tarsCtx context.Context, newCompany *Company, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCompany.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "createCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateCompanyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreateCompanyOneWayWithContext(tarsCtx context.Context, newCompany *Company, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCompany.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "createCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteCompany is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeleteCompany(CompanyID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "deleteCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteCompanyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeleteCompanyWithContext(tarsCtx context.Context, CompanyID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "deleteCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteCompanyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeleteCompanyOneWayWithContext(tarsCtx context.Context, CompanyID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "deleteCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateCompany is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdateCompany(Company *Company, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Company.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "updateCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateCompanyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdateCompanyWithContext(tarsCtx context.Context, Company *Company, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Company.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "updateCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateCompanyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdateCompanyOneWayWithContext(tarsCtx context.Context, Company *Company, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = Company.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "updateCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompany is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompany(offset int32, limit int32, Companys *[]Company, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]Company, length)
		for i0, e0 := int32(0), length; i0 < e0; i0++ {

			err = (*Companys)[i0].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyWithContext(tarsCtx context.Context, offset int32, limit int32, Companys *[]Company, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]Company, length)
		for i1, e1 := int32(0), length; i1 < e1; i1++ {

			err = (*Companys)[i1].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, Companys *[]Company, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryCompany", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyByCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyByCondition(offset int32, limit int32, keys string, value string, Companys *[]Company, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]Company, length)
		for i2, e2 := int32(0), length; i2 < e2; i2++ {

			err = (*Companys)[i2].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyByConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyByConditionWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, Companys *[]Company, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]Company, length)
		for i3, e3 := int32(0), length; i3 < e3; i3++ {

			err = (*Companys)[i3].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyByConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyByConditionOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, Companys *[]Company, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryCompanyByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindCompanyAndRole is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) BindCompanyAndRole(newCompanyHasRole *CompanyHasRole, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCompanyHasRole.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "bindCompanyAndRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindCompanyAndRoleWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) BindCompanyAndRoleWithContext(tarsCtx context.Context, newCompanyHasRole *CompanyHasRole, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCompanyHasRole.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "bindCompanyAndRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindCompanyAndRoleOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) BindCompanyAndRoleOneWayWithContext(tarsCtx context.Context, newCompanyHasRole *CompanyHasRole, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCompanyHasRole.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "bindCompanyAndRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindCompanyAndRole is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UnBindCompanyAndRole(CompanyHasRoleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyHasRoleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "unBindCompanyAndRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindCompanyAndRoleWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UnBindCompanyAndRoleWithContext(tarsCtx context.Context, CompanyHasRoleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyHasRoleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "unBindCompanyAndRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindCompanyAndRoleOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UnBindCompanyAndRoleOneWayWithContext(tarsCtx context.Context, CompanyHasRoleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyHasRoleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "unBindCompanyAndRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyRole is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyRole(offset int32, limit int32, Companys *[]CompanyHasRole, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]CompanyHasRole, length)
		for i4, e4 := int32(0), length; i4 < e4; i4++ {

			err = (*Companys)[i4].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyRoleWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyRoleWithContext(tarsCtx context.Context, offset int32, limit int32, Companys *[]CompanyHasRole, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]CompanyHasRole, length)
		for i5, e5 := int32(0), length; i5 < e5; i5++ {

			err = (*Companys)[i5].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyRoleOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyRoleOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, Companys *[]CompanyHasRole, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryCompanyRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyRoleByCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyRoleByCondition(offset int32, limit int32, keys string, value string, binds *[]CompanyHasRole, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*binds))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *binds {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyRoleByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*binds) = make([]CompanyHasRole, length)
		for i6, e6 := int32(0), length; i6 < e6; i6++ {

			err = (*binds)[i6].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyRoleByConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyRoleByConditionWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, binds *[]CompanyHasRole, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*binds))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *binds {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyRoleByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*binds) = make([]CompanyHasRole, length)
		for i7, e7 := int32(0), length; i7 < e7; i7++ {

			err = (*binds)[i7].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyRoleByConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyRoleByConditionOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, binds *[]CompanyHasRole, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*binds))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *binds {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryCompanyRoleByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateRole is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreateRole(newRole *Role, c *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newRole.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*c), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "createRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*c), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateRoleWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreateRoleWithContext(tarsCtx context.Context, newRole *Role, c *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newRole.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*c), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "createRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*c), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreateRoleOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreateRoleOneWayWithContext(tarsCtx context.Context, newRole *Role, c *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newRole.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*c), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "createRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteRole is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeleteRole(roleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(roleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "deleteRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteRoleWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeleteRoleWithContext(tarsCtx context.Context, roleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(roleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "deleteRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeleteRoleOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeleteRoleOneWayWithContext(tarsCtx context.Context, roleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(roleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "deleteRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateRole is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdateRole(role *Role, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = role.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "updateRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateRoleWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdateRoleWithContext(tarsCtx context.Context, role *Role, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = role.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "updateRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdateRoleOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdateRoleOneWayWithContext(tarsCtx context.Context, role *Role, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = role.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "updateRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRole is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRole(offset int32, limit int32, role *[]Role, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*role))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *role {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*role) = make([]Role, length)
		for i8, e8 := int32(0), length; i8 < e8; i8++ {

			err = (*role)[i8].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRoleWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRoleWithContext(tarsCtx context.Context, offset int32, limit int32, role *[]Role, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*role))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *role {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*role) = make([]Role, length)
		for i9, e9 := int32(0), length; i9 < e9; i9++ {

			err = (*role)[i9].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRoleOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRoleOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, role *[]Role, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*role))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *role {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryRole", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRoleByCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRoleByCondition(offset int32, limit int32, keys string, value string, role *[]Role, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*role))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *role {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRoleByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*role) = make([]Role, length)
		for i10, e10 := int32(0), length; i10 < e10; i10++ {

			err = (*role)[i10].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRoleByConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRoleByConditionWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, role *[]Role, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*role))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *role {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRoleByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*role) = make([]Role, length)
		for i11, e11 := int32(0), length; i11 < e11; i11++ {

			err = (*role)[i11].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRoleByConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRoleByConditionOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, role *[]Role, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*role))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *role {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryRoleByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindRoleAndPermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) BindRoleAndPermissions(newRoleHasPermission *RoleHasPermission, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newRoleHasPermission.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "bindRoleAndPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindRoleAndPermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) BindRoleAndPermissionsWithContext(tarsCtx context.Context, newRoleHasPermission *RoleHasPermission, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newRoleHasPermission.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "bindRoleAndPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//BindRoleAndPermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) BindRoleAndPermissionsOneWayWithContext(tarsCtx context.Context, newRoleHasPermission *RoleHasPermission, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newRoleHasPermission.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "bindRoleAndPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindRoleAndPermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UnBindRoleAndPermissions(RoleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(RoleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "unBindRoleAndPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindRoleAndPermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UnBindRoleAndPermissionsWithContext(tarsCtx context.Context, RoleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(RoleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "unBindRoleAndPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UnBindRoleAndPermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UnBindRoleAndPermissionsOneWayWithContext(tarsCtx context.Context, RoleID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(RoleID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "unBindRoleAndPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRolePermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRolePermissions(offset int32, limit int32, Companys *[]RoleHasPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRolePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]RoleHasPermission, length)
		for i12, e12 := int32(0), length; i12 < e12; i12++ {

			err = (*Companys)[i12].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRolePermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRolePermissionsWithContext(tarsCtx context.Context, offset int32, limit int32, Companys *[]RoleHasPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRolePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Companys) = make([]RoleHasPermission, length)
		for i13, e13 := int32(0), length; i13 < e13; i13++ {

			err = (*Companys)[i13].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRolePermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRolePermissionsOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, Companys *[]RoleHasPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Companys))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Companys {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryRolePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRolePermissionsByCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRolePermissionsByCondition(offset int32, limit int32, keys string, value string, binds *[]RoleHasPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*binds))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *binds {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRolePermissionsByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*binds) = make([]RoleHasPermission, length)
		for i14, e14 := int32(0), length; i14 < e14; i14++ {

			err = (*binds)[i14].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRolePermissionsByConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRolePermissionsByConditionWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, binds *[]RoleHasPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*binds))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *binds {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryRolePermissionsByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*binds) = make([]RoleHasPermission, length)
		for i15, e15 := int32(0), length; i15 < e15; i15++ {

			err = (*binds)[i15].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryRolePermissionsByConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryRolePermissionsByConditionOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, binds *[]RoleHasPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*binds))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *binds {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryRolePermissionsByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreatePermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreatePermissions(newCPermission *CPermission, c *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCPermission.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*c), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "createPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*c), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreatePermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreatePermissionsWithContext(tarsCtx context.Context, newCPermission *CPermission, c *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCPermission.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*c), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "createPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*c), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CreatePermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CreatePermissionsOneWayWithContext(tarsCtx context.Context, newCPermission *CPermission, c *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = newCPermission.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*c), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "createPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeletePermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeletePermissions(PermissionsID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PermissionsID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "deletePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeletePermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeletePermissionsWithContext(tarsCtx context.Context, PermissionsID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PermissionsID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "deletePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 2, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//DeletePermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) DeletePermissionsOneWayWithContext(tarsCtx context.Context, PermissionsID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(PermissionsID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 2)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "deletePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdatePermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdatePermissions(PermissionsID *CPermission, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = PermissionsID.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "updatePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdatePermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdatePermissionsWithContext(tarsCtx context.Context, PermissionsID *CPermission, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = PermissionsID.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "updatePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 4, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//UpdatePermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) UpdatePermissionsOneWayWithContext(tarsCtx context.Context, PermissionsID *CPermission, keys string, value string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = PermissionsID.WriteBlock(_os, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 4)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "updatePermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryPermissions(offset int32, limit int32, Permissions *[]CPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissions))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissions {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Permissions) = make([]CPermission, length)
		for i16, e16 := int32(0), length; i16 < e16; i16++ {

			err = (*Permissions)[i16].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryPermissionsWithContext(tarsCtx context.Context, offset int32, limit int32, Permissions *[]CPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissions))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissions {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(3, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Permissions) = make([]CPermission, length)
		for i17, e17 := int32(0), length; i17 < e17; i17++ {

			err = (*Permissions)[i17].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 4, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 5, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryPermissionsOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, Permissions *[]CPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissions))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissions {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 4)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 5)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPermissionsByCondition is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryPermissionsByCondition(offset int32, limit int32, keys string, value string, Permissionsout *[]CPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissionsout))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissionsout {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryPermissionsByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Permissionsout) = make([]CPermission, length)
		for i18, e18 := int32(0), length; i18 < e18; i18++ {

			err = (*Permissionsout)[i18].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPermissionsByConditionWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryPermissionsByConditionWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, Permissionsout *[]CPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissionsout))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissionsout {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryPermissionsByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(5, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Permissionsout) = make([]CPermission, length)
		for i19, e19 := int32(0), length; i19 < e19; i19++ {

			err = (*Permissionsout)[i19].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*count), 6, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 7, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryPermissionsByConditionOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryPermissionsByConditionOneWayWithContext(tarsCtx context.Context, offset int32, limit int32, keys string, value string, Permissionsout *[]CPermission, count *int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(offset, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(limit, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(keys, 3)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(value, 4)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 5)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissionsout))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissionsout {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*count), 6)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 7)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryPermissionsByCondition", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CheckCompanyHasPermissionsByID is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CheckCompanyHasPermissionsByID(CompanyID int32, PermissionID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(PermissionID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "checkCompanyHasPermissionsByID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CheckCompanyHasPermissionsByIDWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CheckCompanyHasPermissionsByIDWithContext(tarsCtx context.Context, CompanyID int32, PermissionID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(PermissionID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "checkCompanyHasPermissionsByID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CheckCompanyHasPermissionsByIDOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CheckCompanyHasPermissionsByIDOneWayWithContext(tarsCtx context.Context, CompanyID int32, PermissionID int32, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(PermissionID, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "checkCompanyHasPermissionsByID", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CheckCompanyHasPermissionsByTag is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CheckCompanyHasPermissionsByTag(CompanyID int32, PermissionsTag string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(PermissionsTag, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "checkCompanyHasPermissionsByTag", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CheckCompanyHasPermissionsByTagWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CheckCompanyHasPermissionsByTagWithContext(tarsCtx context.Context, CompanyID int32, PermissionsTag string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(PermissionsTag, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "checkCompanyHasPermissionsByTag", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err = _is.Read_int32(&(*result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//CheckCompanyHasPermissionsByTagOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) CheckCompanyHasPermissionsByTagOneWayWithContext(tarsCtx context.Context, CompanyID int32, PermissionsTag string, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.Write_string(PermissionsTag, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "checkCompanyHasPermissionsByTag", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyPermissions is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyPermissions(CompanyID int32, Permissions *[]CPermission, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissions))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissions {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)
	tarsCtx := context.Background()

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Permissions) = make([]CPermission, length)
		for i20, e20 := int32(0), length; i20 < e20; i20++ {

			err = (*Permissions)[i20].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyPermissionsWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyPermissionsWithContext(tarsCtx context.Context, CompanyID int32, Permissions *[]CPermission, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissions))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissions {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 0, "queryCompanyPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	_is := codec.NewReader(tools.Int8ToByte(_resp.SBuffer))
	err = _is.Read_int32(&ret, 0, true)
	if err != nil {
		return ret, err
	}

	err, have, ty = _is.SkipToNoCheck(2, true)
	if err != nil {
		return ret, err
	}

	if ty == codec.LIST {
		err = _is.Read_int32(&length, 0, true)
		if err != nil {
			return ret, err
		}

		(*Permissions) = make([]CPermission, length)
		for i21, e21 := int32(0), length; i21 < e21; i21++ {

			err = (*Permissions)[i21].ReadBlock(_is, 0, false)
			if err != nil {
				return ret, err
			}

		}
	} else if ty == codec.SIMPLE_LIST {
		err = fmt.Errorf("not support simple_list type")
		if err != nil {
			return ret, err
		}

	} else {
		err = fmt.Errorf("require vector, but not")
		if err != nil {
			return ret, err
		}

	}

	err = _is.Read_int32(&(*result), 3, true)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//QueryCompanyPermissionsOneWayWithContext is the proxy function for the method defined in the tars file, with the context
func (_obj *CompanyManProcess) QueryCompanyPermissionsOneWayWithContext(tarsCtx context.Context, CompanyID int32, Permissions *[]CPermission, result *int32, _opt ...map[string]string) (ret int32, err error) {

	var length int32
	var have bool
	var ty byte
	_os := codec.NewBuffer()
	err = _os.Write_int32(CompanyID, 1)
	if err != nil {
		return ret, err
	}

	err = _os.WriteHead(codec.LIST, 2)
	if err != nil {
		return ret, err
	}

	err = _os.Write_int32(int32(len((*Permissions))), 0)
	if err != nil {
		return ret, err
	}

	for _, v := range *Permissions {

		err = v.WriteBlock(_os, 0)
		if err != nil {
			return ret, err
		}

	}

	err = _os.Write_int32((*result), 3)
	if err != nil {
		return ret, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}
	_resp := new(requestf.ResponsePacket)

	err = _obj.s.Tars_invoke(tarsCtx, 1, "queryCompanyPermissions", _os.ToBytes(), _status, _context, _resp)
	if err != nil {
		return ret, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range _resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range _resp.Status {
			_status[k] = v
		}

	}
	_ = length
	_ = have
	_ = ty
	return ret, nil
}

//SetServant sets servant for the service.
func (_obj *CompanyManProcess) SetServant(s m.Servant) {
	_obj.s = s
}

//TarsSetTimeout sets the timeout for the servant which is in ms.
func (_obj *CompanyManProcess) TarsSetTimeout(t int) {
	_obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol sets the protocol for the servant.
func (_obj *CompanyManProcess) TarsSetProtocol(p m.Protocol) {
	_obj.s.TarsSetProtocol(p)
}

//AddServant adds servant  for the service.
func (_obj *CompanyManProcess) AddServant(imp _impCompanyManProcess, obj string) {
	tars.AddServant(_obj, imp, obj)
}

//AddServant adds servant  for the service with context.
func (_obj *CompanyManProcess) AddServantWithContext(imp _impCompanyManProcessWithContext, obj string) {
	tars.AddServantWithContext(_obj, imp, obj)
}

type _impCompanyManProcess interface {
	CreateCompany(newCompany *Company, result *int32) (ret int32, err error)
	DeleteCompany(CompanyID int32, result *int32) (ret int32, err error)
	UpdateCompany(Company *Company, keys string, value string, result *int32) (ret int32, err error)
	QueryCompany(offset int32, limit int32, Companys *[]Company, count *int32, result *int32) (ret int32, err error)
	QueryCompanyByCondition(offset int32, limit int32, keys string, value string, Companys *[]Company, count *int32, result *int32) (ret int32, err error)
	BindCompanyAndRole(newCompanyHasRole *CompanyHasRole, result *int32) (ret int32, err error)
	UnBindCompanyAndRole(CompanyHasRoleID int32, result *int32) (ret int32, err error)
	QueryCompanyRole(offset int32, limit int32, Companys *[]CompanyHasRole, count *int32, result *int32) (ret int32, err error)
	QueryCompanyRoleByCondition(offset int32, limit int32, keys string, value string, binds *[]CompanyHasRole, count *int32, result *int32) (ret int32, err error)
	CreateRole(newRole *Role, c *int32) (ret int32, err error)
	DeleteRole(roleID int32, result *int32) (ret int32, err error)
	UpdateRole(role *Role, keys string, value string, result *int32) (ret int32, err error)
	QueryRole(offset int32, limit int32, role *[]Role, count *int32, result *int32) (ret int32, err error)
	QueryRoleByCondition(offset int32, limit int32, keys string, value string, role *[]Role, count *int32, result *int32) (ret int32, err error)
	BindRoleAndPermissions(newRoleHasPermission *RoleHasPermission, result *int32) (ret int32, err error)
	UnBindRoleAndPermissions(RoleID int32, result *int32) (ret int32, err error)
	QueryRolePermissions(offset int32, limit int32, Companys *[]RoleHasPermission, count *int32, result *int32) (ret int32, err error)
	QueryRolePermissionsByCondition(offset int32, limit int32, keys string, value string, binds *[]RoleHasPermission, count *int32, result *int32) (ret int32, err error)
	CreatePermissions(newCPermission *CPermission, c *int32) (ret int32, err error)
	DeletePermissions(PermissionsID int32, result *int32) (ret int32, err error)
	UpdatePermissions(PermissionsID *CPermission, keys string, value string, result *int32) (ret int32, err error)
	QueryPermissions(offset int32, limit int32, Permissions *[]CPermission, count *int32, result *int32) (ret int32, err error)
	QueryPermissionsByCondition(offset int32, limit int32, keys string, value string, Permissionsout *[]CPermission, count *int32, result *int32) (ret int32, err error)
	CheckCompanyHasPermissionsByID(CompanyID int32, PermissionID int32, result *int32) (ret int32, err error)
	CheckCompanyHasPermissionsByTag(CompanyID int32, PermissionsTag string, result *int32) (ret int32, err error)
	QueryCompanyPermissions(CompanyID int32, Permissions *[]CPermission, result *int32) (ret int32, err error)
}
type _impCompanyManProcessWithContext interface {
	CreateCompany(tarsCtx context.Context, newCompany *Company, result *int32) (ret int32, err error)
	DeleteCompany(tarsCtx context.Context, CompanyID int32, result *int32) (ret int32, err error)
	UpdateCompany(tarsCtx context.Context, Company *Company, keys string, value string, result *int32) (ret int32, err error)
	QueryCompany(tarsCtx context.Context, offset int32, limit int32, Companys *[]Company, count *int32, result *int32) (ret int32, err error)
	QueryCompanyByCondition(tarsCtx context.Context, offset int32, limit int32, keys string, value string, Companys *[]Company, count *int32, result *int32) (ret int32, err error)
	BindCompanyAndRole(tarsCtx context.Context, newCompanyHasRole *CompanyHasRole, result *int32) (ret int32, err error)
	UnBindCompanyAndRole(tarsCtx context.Context, CompanyHasRoleID int32, result *int32) (ret int32, err error)
	QueryCompanyRole(tarsCtx context.Context, offset int32, limit int32, Companys *[]CompanyHasRole, count *int32, result *int32) (ret int32, err error)
	QueryCompanyRoleByCondition(tarsCtx context.Context, offset int32, limit int32, keys string, value string, binds *[]CompanyHasRole, count *int32, result *int32) (ret int32, err error)
	CreateRole(tarsCtx context.Context, newRole *Role, c *int32) (ret int32, err error)
	DeleteRole(tarsCtx context.Context, roleID int32, result *int32) (ret int32, err error)
	UpdateRole(tarsCtx context.Context, role *Role, keys string, value string, result *int32) (ret int32, err error)
	QueryRole(tarsCtx context.Context, offset int32, limit int32, role *[]Role, count *int32, result *int32) (ret int32, err error)
	QueryRoleByCondition(tarsCtx context.Context, offset int32, limit int32, keys string, value string, role *[]Role, count *int32, result *int32) (ret int32, err error)
	BindRoleAndPermissions(tarsCtx context.Context, newRoleHasPermission *RoleHasPermission, result *int32) (ret int32, err error)
	UnBindRoleAndPermissions(tarsCtx context.Context, RoleID int32, result *int32) (ret int32, err error)
	QueryRolePermissions(tarsCtx context.Context, offset int32, limit int32, Companys *[]RoleHasPermission, count *int32, result *int32) (ret int32, err error)
	QueryRolePermissionsByCondition(tarsCtx context.Context, offset int32, limit int32, keys string, value string, binds *[]RoleHasPermission, count *int32, result *int32) (ret int32, err error)
	CreatePermissions(tarsCtx context.Context, newCPermission *CPermission, c *int32) (ret int32, err error)
	DeletePermissions(tarsCtx context.Context, PermissionsID int32, result *int32) (ret int32, err error)
	UpdatePermissions(tarsCtx context.Context, PermissionsID *CPermission, keys string, value string, result *int32) (ret int32, err error)
	QueryPermissions(tarsCtx context.Context, offset int32, limit int32, Permissions *[]CPermission, count *int32, result *int32) (ret int32, err error)
	QueryPermissionsByCondition(tarsCtx context.Context, offset int32, limit int32, keys string, value string, Permissionsout *[]CPermission, count *int32, result *int32) (ret int32, err error)
	CheckCompanyHasPermissionsByID(tarsCtx context.Context, CompanyID int32, PermissionID int32, result *int32) (ret int32, err error)
	CheckCompanyHasPermissionsByTag(tarsCtx context.Context, CompanyID int32, PermissionsTag string, result *int32) (ret int32, err error)
	QueryCompanyPermissions(tarsCtx context.Context, CompanyID int32, Permissions *[]CPermission, result *int32) (ret int32, err error)
}

// Dispatch is used to call the server side implemnet for the method defined in the tars file. _withContext shows using context or not.
func (_obj *CompanyManProcess) Dispatch(tarsCtx context.Context, _val interface{}, tarsReq *requestf.RequestPacket, tarsResp *requestf.ResponsePacket, _withContext bool) (err error) {
	var length int32
	var have bool
	var ty byte
	_is := codec.NewReader(tools.Int8ToByte(tarsReq.SBuffer))
	_os := codec.NewBuffer()
	switch tarsReq.SFuncName {
	case "createCompany":
		var newCompany Company
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = newCompany.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("newCompany", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = newCompany.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["newCompany"])
				newCompany.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &newCompany); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.CreateCompany(&newCompany, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.CreateCompany(tarsCtx, &newCompany, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "deleteCompany":
		var CompanyID int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&CompanyID, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("CompanyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&CompanyID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["CompanyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &CompanyID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.DeleteCompany(CompanyID, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.DeleteCompany(tarsCtx, CompanyID, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "updateCompany":
		var Company Company
		var keys string
		var value string
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = Company.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("Company", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = Company.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["Company"])
				Company.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &Company); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.UpdateCompany(&Company, keys, value, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.UpdateCompany(tarsCtx, &Company, keys, value, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 4)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryCompany":
		var offset int32
		var limit int32
		var Companys []Company
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryCompany(offset, limit, &Companys, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryCompany(tarsCtx, offset, limit, &Companys, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Companys", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Companys"] = Companys
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryCompanyByCondition":
		var offset int32
		var limit int32
		var keys string
		var value string
		var Companys []Company
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryCompanyByCondition(offset, limit, keys, value, &Companys, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryCompanyByCondition(tarsCtx, offset, limit, keys, value, &Companys, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 6)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 7)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Companys", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Companys"] = Companys
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "bindCompanyAndRole":
		var newCompanyHasRole CompanyHasRole
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = newCompanyHasRole.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("newCompanyHasRole", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = newCompanyHasRole.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["newCompanyHasRole"])
				newCompanyHasRole.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &newCompanyHasRole); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.BindCompanyAndRole(&newCompanyHasRole, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.BindCompanyAndRole(tarsCtx, &newCompanyHasRole, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "unBindCompanyAndRole":
		var CompanyHasRoleID int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&CompanyHasRoleID, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("CompanyHasRoleID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&CompanyHasRoleID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["CompanyHasRoleID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &CompanyHasRoleID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.UnBindCompanyAndRole(CompanyHasRoleID, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.UnBindCompanyAndRole(tarsCtx, CompanyHasRoleID, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryCompanyRole":
		var offset int32
		var limit int32
		var Companys []CompanyHasRole
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryCompanyRole(offset, limit, &Companys, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryCompanyRole(tarsCtx, offset, limit, &Companys, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Companys", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Companys"] = Companys
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryCompanyRoleByCondition":
		var offset int32
		var limit int32
		var keys string
		var value string
		var binds []CompanyHasRole
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryCompanyRoleByCondition(offset, limit, keys, value, &binds, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryCompanyRoleByCondition(tarsCtx, offset, limit, keys, value, &binds, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(binds)), 0)
			if err != nil {
				return err
			}

			for _, v := range binds {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 6)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 7)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(binds)), 0)
			if err != nil {
				return err
			}

			for _, v := range binds {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("binds", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["binds"] = binds
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "createRole":
		var newRole Role
		var c int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = newRole.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("newRole", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = newRole.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["newRole"])
				newRole.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &newRole); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.CreateRole(&newRole, &c)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.CreateRole(tarsCtx, &newRole, &c)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(c, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(c, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("c", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["c"] = c

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "deleteRole":
		var roleID int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&roleID, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("roleID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&roleID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["roleID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &roleID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.DeleteRole(roleID, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.DeleteRole(tarsCtx, roleID, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "updateRole":
		var role Role
		var keys string
		var value string
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = role.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("role", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = role.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["role"])
				role.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &role); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.UpdateRole(&role, keys, value, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.UpdateRole(tarsCtx, &role, keys, value, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 4)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryRole":
		var offset int32
		var limit int32
		var role []Role
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryRole(offset, limit, &role, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryRole(tarsCtx, offset, limit, &role, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(role)), 0)
			if err != nil {
				return err
			}

			for _, v := range role {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(role)), 0)
			if err != nil {
				return err
			}

			for _, v := range role {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("role", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["role"] = role
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryRoleByCondition":
		var offset int32
		var limit int32
		var keys string
		var value string
		var role []Role
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryRoleByCondition(offset, limit, keys, value, &role, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryRoleByCondition(tarsCtx, offset, limit, keys, value, &role, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(role)), 0)
			if err != nil {
				return err
			}

			for _, v := range role {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 6)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 7)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(role)), 0)
			if err != nil {
				return err
			}

			for _, v := range role {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("role", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["role"] = role
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "bindRoleAndPermissions":
		var newRoleHasPermission RoleHasPermission
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = newRoleHasPermission.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("newRoleHasPermission", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = newRoleHasPermission.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["newRoleHasPermission"])
				newRoleHasPermission.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &newRoleHasPermission); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.BindRoleAndPermissions(&newRoleHasPermission, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.BindRoleAndPermissions(tarsCtx, &newRoleHasPermission, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "unBindRoleAndPermissions":
		var RoleID int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&RoleID, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("RoleID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&RoleID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["RoleID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &RoleID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.UnBindRoleAndPermissions(RoleID, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.UnBindRoleAndPermissions(tarsCtx, RoleID, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryRolePermissions":
		var offset int32
		var limit int32
		var Companys []RoleHasPermission
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryRolePermissions(offset, limit, &Companys, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryRolePermissions(tarsCtx, offset, limit, &Companys, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Companys)), 0)
			if err != nil {
				return err
			}

			for _, v := range Companys {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Companys", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Companys"] = Companys
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryRolePermissionsByCondition":
		var offset int32
		var limit int32
		var keys string
		var value string
		var binds []RoleHasPermission
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryRolePermissionsByCondition(offset, limit, keys, value, &binds, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryRolePermissionsByCondition(tarsCtx, offset, limit, keys, value, &binds, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(binds)), 0)
			if err != nil {
				return err
			}

			for _, v := range binds {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 6)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 7)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(binds)), 0)
			if err != nil {
				return err
			}

			for _, v := range binds {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("binds", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["binds"] = binds
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "createPermissions":
		var newCPermission CPermission
		var c int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = newCPermission.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("newCPermission", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = newCPermission.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["newCPermission"])
				newCPermission.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &newCPermission); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.CreatePermissions(&newCPermission, &c)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.CreatePermissions(tarsCtx, &newCPermission, &c)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(c, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(c, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("c", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["c"] = c

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "deletePermissions":
		var PermissionsID int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&PermissionsID, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("PermissionsID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&PermissionsID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["PermissionsID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &PermissionsID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.DeletePermissions(PermissionsID, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.DeletePermissions(tarsCtx, PermissionsID, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 2)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "updatePermissions":
		var PermissionsID CPermission
		var keys string
		var value string
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = PermissionsID.ReadBlock(_is, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 3, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("PermissionsID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = PermissionsID.ReadBlock(_is, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["PermissionsID"])
				PermissionsID.ResetDefault()
				if err = json.Unmarshal([]byte(_jsonStr_), &PermissionsID); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.UpdatePermissions(&PermissionsID, keys, value, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.UpdatePermissions(tarsCtx, &PermissionsID, keys, value, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 4)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryPermissions":
		var offset int32
		var limit int32
		var Permissions []CPermission
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryPermissions(offset, limit, &Permissions, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryPermissions(tarsCtx, offset, limit, &Permissions, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 3)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Permissions)), 0)
			if err != nil {
				return err
			}

			for _, v := range Permissions {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 4)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 5)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Permissions)), 0)
			if err != nil {
				return err
			}

			for _, v := range Permissions {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Permissions", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Permissions"] = Permissions
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryPermissionsByCondition":
		var offset int32
		var limit int32
		var keys string
		var value string
		var Permissionsout []CPermission
		var count int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&offset, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&limit, 2, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&keys, 3, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&value, 4, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("offset", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&offset, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("limit", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&limit, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("keys", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&keys, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("value", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&value, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["offset"])
				if err = json.Unmarshal([]byte(_jsonStr_), &offset); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["limit"])
				if err = json.Unmarshal([]byte(_jsonStr_), &limit); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["keys"])
				if err = json.Unmarshal([]byte(_jsonStr_), &keys); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["value"])
				if err = json.Unmarshal([]byte(_jsonStr_), &value); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryPermissionsByCondition(offset, limit, keys, value, &Permissionsout, &count, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryPermissionsByCondition(tarsCtx, offset, limit, keys, value, &Permissionsout, &count, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 5)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Permissionsout)), 0)
			if err != nil {
				return err
			}

			for _, v := range Permissionsout {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(count, 6)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 7)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Permissionsout)), 0)
			if err != nil {
				return err
			}

			for _, v := range Permissionsout {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Permissionsout", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(count, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("count", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Permissionsout"] = Permissionsout
			_rspJson_["count"] = count
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "checkCompanyHasPermissionsByID":
		var CompanyID int32
		var PermissionID int32
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&CompanyID, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_int32(&PermissionID, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("CompanyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&CompanyID, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("PermissionID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&PermissionID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["CompanyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &CompanyID); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["PermissionID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &PermissionID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.CheckCompanyHasPermissionsByID(CompanyID, PermissionID, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.CheckCompanyHasPermissionsByID(tarsCtx, CompanyID, PermissionID, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 3)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "checkCompanyHasPermissionsByTag":
		var CompanyID int32
		var PermissionsTag string
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&CompanyID, 1, true)
			if err != nil {
				return err
			}

			err = _is.Read_string(&PermissionsTag, 2, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("CompanyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&CompanyID, 0, true)
			if err != nil {
				return err
			}

			_reqTup_.GetBuffer("PermissionsTag", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_string(&PermissionsTag, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["CompanyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &CompanyID); err != nil {
					return err
				}
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["PermissionsTag"])
				if err = json.Unmarshal([]byte(_jsonStr_), &PermissionsTag); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.CheckCompanyHasPermissionsByTag(CompanyID, PermissionsTag, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.CheckCompanyHasPermissionsByTag(tarsCtx, CompanyID, PermissionsTag, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(result, 3)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}
	case "queryCompanyPermissions":
		var CompanyID int32
		var Permissions []CPermission
		var result int32

		if tarsReq.IVersion == basef.TARSVERSION {

			err = _is.Read_int32(&CompanyID, 1, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_reqTup_ := tup.NewUniAttribute()
			_reqTup_.Decode(_is)

			var _tupBuffer_ []byte

			_reqTup_.GetBuffer("CompanyID", &_tupBuffer_)
			_is.Reset(_tupBuffer_)
			err = _is.Read_int32(&CompanyID, 0, true)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.JSONVERSION {
			var _jsonDat_ map[string]interface{}
			_decoder_ := json.NewDecoder(bytes.NewReader(_is.ToBytes()))
			_decoder_.UseNumber()
			err = _decoder_.Decode(&_jsonDat_)
			if err != nil {
				return fmt.Errorf("Decode reqpacket failed, error: %+v", err)
			}
			{
				_jsonStr_, _ := json.Marshal(_jsonDat_["CompanyID"])
				if err = json.Unmarshal([]byte(_jsonStr_), &CompanyID); err != nil {
					return err
				}
			}

		} else {
			err = fmt.Errorf("Decode reqpacket fail, error version: %d", tarsReq.IVersion)
			return err
		}

		var _funRet_ int32
		if _withContext == false {
			_imp := _val.(_impCompanyManProcess)
			_funRet_, err = _imp.QueryCompanyPermissions(CompanyID, &Permissions, &result)
		} else {
			_imp := _val.(_impCompanyManProcessWithContext)
			_funRet_, err = _imp.QueryCompanyPermissions(tarsCtx, CompanyID, &Permissions, &result)
		}

		if err != nil {
			return err
		}

		if tarsReq.IVersion == basef.TARSVERSION {
			_os.Reset()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			err = _os.WriteHead(codec.LIST, 2)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Permissions)), 0)
			if err != nil {
				return err
			}

			for _, v := range Permissions {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}

			err = _os.Write_int32(result, 3)
			if err != nil {
				return err
			}

		} else if tarsReq.IVersion == basef.TUPVERSION {
			_tupRsp_ := tup.NewUniAttribute()

			err = _os.Write_int32(_funRet_, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("", _os.ToBytes())
			_tupRsp_.PutBuffer("tars_ret", _os.ToBytes())

			_os.Reset()
			err = _os.WriteHead(codec.LIST, 0)
			if err != nil {
				return err
			}

			err = _os.Write_int32(int32(len(Permissions)), 0)
			if err != nil {
				return err
			}

			for _, v := range Permissions {

				err = v.WriteBlock(_os, 0)
				if err != nil {
					return err
				}

			}
			_tupRsp_.PutBuffer("Permissions", _os.ToBytes())

			_os.Reset()
			err = _os.Write_int32(result, 0)
			if err != nil {
				return err
			}

			_tupRsp_.PutBuffer("result", _os.ToBytes())

			_os.Reset()
			err = _tupRsp_.Encode(_os)
			if err != nil {
				return err
			}
		} else if tarsReq.IVersion == basef.JSONVERSION {
			_rspJson_ := map[string]interface{}{}
			_rspJson_["tars_ret"] = _funRet_
			_rspJson_["Permissions"] = Permissions
			_rspJson_["result"] = result

			var _rspByte_ []byte
			if _rspByte_, err = json.Marshal(_rspJson_); err != nil {
				return err
			}

			_os.Reset()
			err = _os.Write_slice_uint8(_rspByte_)
			if err != nil {
				return err
			}
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(tarsCtx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(tarsCtx)
	if ok && c != nil {
		_context = c
	}
	*tarsResp = requestf.ResponsePacket{
		IVersion:     tarsReq.IVersion,
		CPacketType:  0,
		IRequestId:   tarsReq.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(_os.ToBytes()),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}

	_ = _is
	_ = _os
	_ = length
	_ = have
	_ = ty
	return nil
}
